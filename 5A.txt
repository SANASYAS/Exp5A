#FIBONACCI SERIES
print("FIBONACCI SERIES:")
def fibonacci_series(n): a=0
b=1 k=0
if n==0:
return [0] elif n==1:
return [0,1] res=[0,1] while k<n-2:
c=a+b res+=[c] a=b
b=c k+=1
return res print(fibonacci_series(7)) #FACTORIAL print("FACTORIAL:")
def fact(n): if n<0:
return "factorial not available for negative numbers"

if n==0 or n==1: return 1
else:
return n*fact(n-1) print(fact(-50)) #ANAGRAM print("ANAGRAM:")
def anagram(s1,s2): if len(s1)!=len(s2):
return False
for i in range(len(s1)): if s1[i] in s2:
s2.replace(s1[i],'') else:
return False return True
print(anagram('sanas','sanas')) #PALINDROME print("PALINDROME:")
def is_palindrome(s): if s==s[::-1]:
return True return False
print(is_palindrome('sanas'))
#CIRCLE
print("CIRCLE:") import math
class Circle:
def  init (self, radius): self.radius=radius
def area(self):
return math.pi*self.radius*self.radius def circumference(self):
return 2*math.pi*self.radius a=Circle(5)
print("The area of circle is:",a.area())
print("The circumference of circle is:",a.circumference())
#BANK ACCOUNT
print("BANK ACCOUNT:")
class BankAccount:

def  init (self,initial_balance): self.initial_balance=initial_balance
def deposit(self,amount): self.initial_balance=self.initial_balance+amount
def withdraw(self,amount): self.initial_balance=self.initial_balance-amount
def get_balance(self):
if self.initial_balance<0:
return f"your balance is too low -> {self.initial_balance}..please make deposit of certain amount to maintain your minimum balance"
return f"your balance is {self.initial_balance}" a=BankAccount(150)
a.deposit(30) a.withdraw(100) print(a.get_balance()) #STUDENT print("STUDENT:")
class Student:
def  init (self, name, age): self.name=name self.age=age self.course=[]
def set_name(self, name): self.name=name
def set_age(self, age): self.age=age
def enroll_course(self, course): self.course+=[course]
def get_name(self): return self.name
def get_age(self): return self.age
def get_courses(self): return self.course
a=Student('Sanasya',20) a.enroll_course('SA') a.enroll_course('BDA') a.enroll_course('DevOps') print(a.get_name()) print(a.get_age())

print(a.get_courses())
#STACK
print("STACK:") class Stack:
def  init (self,size): self.stack=[None]*size self.size=size
self.top=-1
def push(self,val): if self.is_full():
print("stack overflow") return
self.top=self.top+1 self.stack[self.top]=val
def pop(self):
if self.is_empty(): print("stack underflow") return
self.stack[self.top]=None self.top-=1
def is_full(self):
return self.top+1==self.size def is_empty(self):
return self.top==-1 def sizes(self):
return self.top+1 def peek(self):
return self.stack[self.top] a=Stack(5)
a.push(10) a.push(20) a.push(30) a.push(40) a.push(50) a.pop() print(a.sizes())
print(a.peek())
#QUEUE
print("QUEUE:") class Queue:

def  init (self,size): self.queue=[None]*size self.max=size self.front=self.rear=-1 self.size=0
def enqueue(self,val): if self.is_full():
print("queue is full") return
if self.rear==-1: self.front=self.rear=0 self.queue[self.rear]=val
else:
self.rear+=1 self.queue[self.rear]=val
self.size+=1 def dequeue(self):
if self.is_empty(): print("queue is empty") return
if self.front+1==self.max: a=self.queue[self.front] self.front=self.rear=-1
else:
a=self.queue[self.front] self.front+=1
self.size-=1 return a
def is_full(self):
return self.rear+1==self.max def is_empty(self):
return self.front==-1 def sizee(self):
return self.size a=Queue(5) a.enqueue(10) a.enqueue(20) a.enqueue(30) a.dequeue() print(a.sizee())


#EMPLOYEE
print("EMPLOYEE:")
class Employee:
def  init (self,name,id,salary): self.name=name
self.id=id self.salary=salary
def set_name(self,name): self.name=name
def set_id(self,id): self.id=id
def set_salary(self,salary): self.salary=salary
def get_name(self): return self.name
def get_id(self): return self.id
def get_salary(self): return self.salary
def details(self):
return f"Employee name:{self.name};Employee id:{self.id};Employee's Salary:{self.salary}"
a=Employee('XXX',101,10000)
print(a.get_name()) a.set_name('Sanasya') a.set_id(150) a.set_salary(200000) print(a.details())







UNIT TESTING:
import unittest
class testdata(unittest.TestCase): def test1(self):
a=Employee("xxx",50,11000) self.assertEqual(a.get_id(),50)
def test2(self): a=Queue(5) a.enqueue(1) a.enqueue(2)
self.assertEqual(a.sizee(),2) def test3(self):
a=Stack(5) self.assertIsNone(a.peek())
def test4(self):

a=Student('Sanasya',20) self.assertIs(a.get_name(),'Sanasya')
def test5(self): a=BankAccount(120) a.deposit(20)
self.assertIsInstance(a.get_balance(),str) def test6(self):
a=Student('Sanasya',20) a.enroll_course('python') a.enroll_course('ds') self.assertIn('ds',a.get_courses())
def test7(self): a=Circle(3) self.assertTrue(a.area())
def test8(self): a=Employee("xxx",50,11000) self.assertNotEqual(a.get_id(),150)
def test9(self): a=Queue(5) a.enqueue(1) a.enqueue(2)
self.assertEqual(a.sizee(),2) def test10(self):
a=Stack(5) a.push(2)
self.assertIsNotNone(a.peek()) def test11(self):
a=Student('Sanasya',20) self.assertIsNot(a.get_name(),'SanasyaS')
def test12(self): a=BankAccount(120) a.deposit(20)
self.assertNotIsInstance(a.get_balance(),int) if   name  =='  main  ':
unittest.main(argv=['first-arg-is-ignored'],exit=False)





#ASSERTION ERROR
def test13(self):
a=Student('Sanasya',20) a.enroll_course('SA') a.enroll_course('DL') self.assertNotIn('DL',a.get_courses())
def test14(self): a=Circle(5) self.assertFalse(a.area())